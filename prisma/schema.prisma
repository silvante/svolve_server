// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums
enum WorkerRoles {
  receptionist
  doctor
}

model User {
  id                   Int                  @id @default(autoincrement())
  name                 String
  bio                  String?
  contact              String?
  username             String               @unique
  email                String               @unique
  avatar               String?
  provider             String
  provider_id          String?
  default_organization DefaultOrganization? @relation("user_default_organization")
  organizations        Organization[]
  created_at           DateTime             @default(now())
  vacancies            Vacancy[]
  works                Worker[]
}

model Vacancy {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  age        Int
  about      String
  origin     String
  job        String
  name       String
  contact    String
  created_at DateTime @default(now())
}

model Worker {
  id              Int                  @id @default(autoincrement())
  worker          User                 @relation(fields: [worker_id], references: [id])
  worker_id       Int
  organization    Organization         @relation(fields: [organization_id], references: [id])
  organization_id Int
  role            WorkerRoles          @default(receptionist)
  created_at      DateTime             @default(now())
  attached_types  WorkerAttachedType[]
}

model WorkerAttachedType {
  id        Int  @id @default(autoincrement())
  type      Type @relation(fields: [type_id], references: [id])
  type_id   Int
  worker    Worker @relation(fields: [worker_id], references: [id], onDelete: Cascade)
  worker_id Int
}

model DefaultOrganization {
  id              Int          @id @default(autoincrement())
  owner           User         @relation("user_default_organization", fields: [owner_id], references: [id])
  owner_id        Int          @unique
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id Int          @unique
}

model Organization {
  id           Int                  @id @default(autoincrement())
  name         String
  unique_name  String               @unique
  description  String?
  banner       Banner?
  logo         String?
  origin       String
  pincode      String
  owner_id     Int
  owner        User                 @relation(fields: [owner_id], references: [id])
  clients      Client[]
  types        Type[]
  created_at   DateTime             @default(now())
  bannerId     Int?
  default_user DefaultOrganization?
  workers      Worker[]
}

model Banner {
  id              Int          @id @default(autoincrement())
  original        String
  thumbnail       String
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id Int          @unique
}

model Client {
  id              Int          @id @default(autoincrement())
  name            String
  surname         String
  born_in         Int
  origin          String
  price           Int
  is_checked      Boolean      @default(false)
  type            Type?        @relation(fields: [type_id], references: [id])
  type_id         Int?
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id Int
  created_at      DateTime     @default(now())
}

model Type {
  id               Int                  @id @default(autoincrement())
  name             String
  description      String?
  clients          Client[]
  price            Int
  organization     Organization?        @relation(fields: [organization_id], references: [id])
  organization_id  Int?
  created_at       DateTime             @default(now())
  attached_workers WorkerAttachedType[]
}
